{
  "stats": {
    "suites": 2,
    "tests": 3,
    "passes": 2,
    "pending": 0,
    "failures": 1,
    "start": "2023-08-18T05:02:55.053Z",
    "end": "2023-08-18T05:03:04.295Z",
    "duration": 9242,
    "testsRegistered": 3,
    "passPercent": 66.66666666666666,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "46d26920-c177-4065-9d23-651568851799",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0e3b57f2-baaa-40e5-aab7-f079d9ed4e8b",
          "title": "add todo test",
          "fullFile": "F:\\xampp-php8\\htdocs\\Jenkins\\Brangus\\code\\seleniumDemo\\test\\thirdTest.js",
          "file": "\\test\\thirdTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully adds a todo to application",
              "fullTitle": "add todo test successfully adds a todo to application",
              "timedOut": null,
              "duration": 4741,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test\n        // launch the browser \n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        // navigate to our application\n        await driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n        // add a todo\n        await driver.findElement(By.id('sampletodotext')).sendKeys('Learn Javascript',Key.RETURN);\n        /** assertion to check if the text \"Learn Selenium\" was added **/\n        // find the last item on the list and retrieve it // retrieves the last item added to the list \n        let todoText = await driver.findElement(By.xpath('//li[last()]')).getText().then(function(value){\n            return value\n        })   \n        await new Promise(r => setTimeout(r, 2000)); // similar to sleep \n        \n        // assert using chai should  ( should uses the value that you want to validate )\n        todoText.should.equal('Learn Javascript');\n        // close the browser\n        await driver.quit();",
              "err": {},
              "uuid": "04fec2c5-cf07-44bc-83d1-6bf4f32d1b32",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "04fec2c5-cf07-44bc-83d1-6bf4f32d1b32"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4741,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        },
        {
          "uuid": "db683691-8885-4ec5-888e-7c41241554be",
          "title": "add second todo test",
          "fullFile": "F:\\xampp-php8\\htdocs\\Jenkins\\Brangus\\code\\seleniumDemo\\test\\secondTest.js",
          "file": "\\test\\secondTest.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully adds a second todo to application",
              "fullTitle": "add second todo test successfully adds a second todo to application",
              "timedOut": null,
              "duration": 4738,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Test\n        // launch the browser \n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        // navigate to our application\n        await driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n        // add a todo\n        await driver.findElement(By.id('sampletodotext')).sendKeys('Learn Javascript',Key.RETURN);\n        /** assertion to check if the text \"Learn Selenium\" was added **/\n        // find the last item on the list and retrieve it // retrieves the last item added to the list \n        let todoText = await driver.findElement(By.xpath('//li[last()]')).getText().then(function(value){\n            return value\n        })   \n        await new Promise(r => setTimeout(r, 2000)); // similar to sleep \n        \n        // assert using chai should  ( should uses the value that you want to validate )\n        todoText.should.equal('Learn Javascript');\n        // close the browser\n        await driver.quit();",
              "err": {},
              "uuid": "7abab812-d85c-46fe-b804-3e3700c5df77",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            },
            {
              "title": "fail test",
              "fullTitle": "add second todo test fail test",
              "timedOut": null,
              "duration": 4073,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Test\n        // launch the browser \n        let driver = await new Builder().forBrowser(\"chrome\").build();\n        // navigate to our application\n        await driver.get(\"https://lambdatest.github.io/sample-todo-app/\");\n        // add a todo\n        await driver.findElement(By.id('sampletodotext')).sendKeys('Learn Javascript',Key.RETURN);\n        /** assertion to check if the text \"Learn Selenium\" was added **/\n        // find the last item on the list and retrieve it // retrieves the last item added to the list \n        let todoText = await driver.findElement(By.xpath('//li[last()]')).getText().then(function(value){\n            return value\n        })   \n        await new Promise(r => setTimeout(r, 2000)); // similar to sleep \n        \n        // assert using chai should  ( should uses the value that you want to validate )\n        todoText.should.equal('Dont Learn Javascript');\n        // close the browser\n        await driver.quit();",
              "err": {
                "message": "AssertionError: expected 'Learn Javascript' to equal 'Dont Learn Javascript'",
                "estack": "AssertionError: expected 'Learn Javascript' to equal 'Dont Learn Javascript'\n    at Context.<anonymous> (test\\secondTest.js:69:25)",
                "diff": "- Learn Javascript\n+ Dont Learn Javascript\n"
              },
              "uuid": "595a0e94-c5f5-4017-86a5-eba7853a1ac3",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7abab812-d85c-46fe-b804-3e3700c5df77"
          ],
          "failures": [
            "595a0e94-c5f5-4017-86a5-eba7853a1ac3"
          ],
          "pending": [],
          "skipped": [],
          "duration": 8811,
          "root": false,
          "rootEmpty": false,
          "_timeout": null
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 0
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "brangusReport",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "customReport",
        "reportFilename": "brangusReport"
      },
      "version": "6.2.0"
    }
  }
}